{"ast":null,"code":"var _jsxFileName = \"/Users/lauren/Hertz-demo/src/examples/Navbars/DashboardNavbar/index.js\",\n    _s = $RefreshSig$();\n\n/**\n=========================================================\n* Material Dashboard 2 React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\nimport { useState, useEffect } from \"react\"; // react-router components\n\nimport { useLocation, Link } from \"react-router-dom\"; // prop-types is a library for typechecking of props.\n\nimport PropTypes from \"prop-types\"; // @material-ui core components\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport Icon from \"@mui/material/Icon\"; // Material Dashboard 2 React components\n\nimport MDBox from \"components/MDBox\";\nimport MDInput from \"components/MDInput\"; // Material Dashboard 2 React example components\n\nimport Breadcrumbs from \"examples/Breadcrumbs\";\nimport NotificationItem from \"examples/Items/NotificationItem\"; // Custom styles for DashboardNavbar\n\nimport { navbar, navbarContainer, navbarRow, navbarIconButton, navbarMobileMenu } from \"examples/Navbars/DashboardNavbar/styles\"; // Material Dashboard 2 PRO React context\n\nimport { useMaterialUIController, setTransparentNavbar, setMiniSidenav, setOpenConfigurator } from \"context\"; // Images\n\nimport brandWhite from \"../../../assets/images/hertz-light-logo.png\";\nimport brandDark from \"assets/images/hertz-dark-logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashboardNavbar(_ref) {\n  _s();\n\n  let {\n    absolute,\n    light,\n    isMini\n  } = _ref;\n  const [navbarType, setNavbarType] = useState();\n  const [controller, dispatch] = useMaterialUIController();\n  const {\n    miniSidenav,\n    transparentNavbar,\n    fixedNavbar,\n    openConfigurator,\n    darkMode\n  } = controller;\n  const [openMenu, setOpenMenu] = useState(false);\n  const route = useLocation().pathname.split(\"/\").slice(1);\n  useEffect(() => {\n    // Setting the navbar type\n    if (fixedNavbar) {\n      setNavbarType(\"sticky\");\n    } else {\n      setNavbarType(\"static\");\n    } // A function that sets the transparent state of the navbar.\n\n\n    function handleTransparentNavbar() {\n      setTransparentNavbar(dispatch, fixedNavbar && window.scrollY === 0 || !fixedNavbar);\n    }\n    /** \n     The event listener that's calling the handleTransparentNavbar function when \n     scrolling the window.\n    */\n\n\n    window.addEventListener(\"scroll\", handleTransparentNavbar); // Call the handleTransparentNavbar function to set the state with the initial value.\n\n    handleTransparentNavbar(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n  }, [dispatch, fixedNavbar]);\n\n  const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n\n  const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n\n  const handleOpenMenu = event => setOpenMenu(event.currentTarget);\n\n  const handleCloseMenu = () => setOpenMenu(false); // Render the notifications menu\n\n\n  const renderMenu = () => /*#__PURE__*/_jsxDEV(Menu, {\n    anchorEl: openMenu,\n    anchorReference: null,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: Boolean(openMenu),\n    onClose: handleCloseMenu,\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(NotificationItem, {\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        children: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 31\n      }, this),\n      title: \"Check new messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationItem, {\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        children: \"podcasts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }, this),\n      title: \"Manage Podcast sessions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationItem, {\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        children: \"shopping_cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }, this),\n      title: \"Payment successfully completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this); // Styles for the navbar icons\n\n\n  const iconsStyle = _ref2 => {\n    let {\n      palette: {\n        dark,\n        white,\n        text\n      },\n      functions: {\n        rgba\n      }\n    } = _ref2;\n    return {\n      color: () => {\n        let colorValue = light || darkMode ? white.main : dark.main;\n\n        if (transparentNavbar && !light) {\n          colorValue = darkMode ? rgba(text.main, 0.6) : text.main;\n        }\n\n        return colorValue;\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    position: absolute ? \"absolute\" : navbarType,\n    color: \"inherit\",\n    sx: theme => navbar(theme, {\n      transparentNavbar,\n      absolute,\n      light,\n      darkMode\n    }),\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      sx: theme => navbarContainer(theme),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: brandDark,\n        width: \"100rem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), isMini ? null : /*#__PURE__*/_jsxDEV(MDBox, {\n        sx: theme => navbarRow(theme, {\n          isMini\n        }),\n        children: [/*#__PURE__*/_jsxDEV(MDBox, {\n          pr: 1,\n          children: /*#__PURE__*/_jsxDEV(MDInput, {\n            label: \"Search here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n          color: light ? \"white\" : \"inherit\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/authentication/sign-in/basic\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              sx: navbarIconButton,\n              size: \"small\",\n              disableRipple: true,\n              children: /*#__PURE__*/_jsxDEV(Icon, {\n                sx: iconsStyle,\n                children: \"account_circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            disableRipple: true,\n            color: \"inherit\",\n            sx: navbarMobileMenu,\n            onClick: handleMiniSidenav,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              sx: iconsStyle,\n              fontSize: \"medium\",\n              children: miniSidenav ? \"menu_open\" : \"menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            disableRipple: true,\n            color: \"inherit\",\n            sx: navbarIconButton,\n            onClick: handleConfiguratorOpen,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              sx: iconsStyle,\n              children: \"settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            disableRipple: true,\n            color: \"inherit\",\n            sx: navbarIconButton,\n            \"aria-controls\": \"notification-menu\",\n            \"aria-haspopup\": \"true\",\n            variant: \"contained\",\n            onClick: handleOpenMenu,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              sx: iconsStyle,\n              children: \"notifications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), renderMenu()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props of DashboardNavbar\n\n\n_s(DashboardNavbar, \"C3W4+gvwLxd9uKcRodv/aA6I1Qw=\", false, function () {\n  return [useMaterialUIController, useLocation];\n});\n\n_c = DashboardNavbar;\nDashboardNavbar.defaultProps = {\n  absolute: false,\n  light: false,\n  isMini: false\n}; // Typechecking props for the DashboardNavbar\n\nDashboardNavbar.propTypes = {\n  absolute: PropTypes.bool,\n  light: PropTypes.bool,\n  isMini: PropTypes.bool\n};\nexport default DashboardNavbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardNavbar\");","map":{"version":3,"sources":["/Users/lauren/Hertz-demo/src/examples/Navbars/DashboardNavbar/index.js"],"names":["useState","useEffect","useLocation","Link","PropTypes","AppBar","Toolbar","IconButton","Menu","Icon","MDBox","MDInput","Breadcrumbs","NotificationItem","navbar","navbarContainer","navbarRow","navbarIconButton","navbarMobileMenu","useMaterialUIController","setTransparentNavbar","setMiniSidenav","setOpenConfigurator","brandWhite","brandDark","DashboardNavbar","absolute","light","isMini","navbarType","setNavbarType","controller","dispatch","miniSidenav","transparentNavbar","fixedNavbar","openConfigurator","darkMode","openMenu","setOpenMenu","route","pathname","split","slice","handleTransparentNavbar","window","scrollY","addEventListener","removeEventListener","handleMiniSidenav","handleConfiguratorOpen","handleOpenMenu","event","currentTarget","handleCloseMenu","renderMenu","vertical","horizontal","Boolean","mt","iconsStyle","palette","dark","white","text","functions","rgba","color","colorValue","main","theme","defaultProps","propTypes","bool"],"mappings":"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","sourcesContent":["/**\n=========================================================\n* Material Dashboard 2 React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { useState, useEffect } from \"react\";\n\n// react-router components\nimport { useLocation, Link } from \"react-router-dom\";\n\n// prop-types is a library for typechecking of props.\nimport PropTypes from \"prop-types\";\n\n// @material-ui core components\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport Icon from \"@mui/material/Icon\";\n\n// Material Dashboard 2 React components\nimport MDBox from \"components/MDBox\";\nimport MDInput from \"components/MDInput\";\n\n// Material Dashboard 2 React example components\nimport Breadcrumbs from \"examples/Breadcrumbs\";\nimport NotificationItem from \"examples/Items/NotificationItem\";\n\n// Custom styles for DashboardNavbar\nimport {\n  navbar,\n  navbarContainer,\n  navbarRow,\n  navbarIconButton,\n  navbarMobileMenu,\n} from \"examples/Navbars/DashboardNavbar/styles\";\n\n// Material Dashboard 2 PRO React context\nimport {\n  useMaterialUIController,\n  setTransparentNavbar,\n  setMiniSidenav,\n  setOpenConfigurator,\n} from \"context\";\n\n// Images\nimport brandWhite from \"../../../assets/images/hertz-light-logo.png\";\nimport brandDark from \"assets/images/hertz-dark-logo.png\";\n\nfunction DashboardNavbar({ absolute, light, isMini }) {\n  const [navbarType, setNavbarType] = useState();\n  const [controller, dispatch] = useMaterialUIController();\n  const {\n    miniSidenav,\n    transparentNavbar,\n    fixedNavbar,\n    openConfigurator,\n    darkMode,\n  } = controller;\n  const [openMenu, setOpenMenu] = useState(false);\n  const route = useLocation().pathname.split(\"/\").slice(1);\n\n  useEffect(() => {\n    // Setting the navbar type\n    if (fixedNavbar) {\n      setNavbarType(\"sticky\");\n    } else {\n      setNavbarType(\"static\");\n    }\n\n    // A function that sets the transparent state of the navbar.\n    function handleTransparentNavbar() {\n      setTransparentNavbar(\n        dispatch,\n        (fixedNavbar && window.scrollY === 0) || !fixedNavbar\n      );\n    }\n\n    /** \n     The event listener that's calling the handleTransparentNavbar function when \n     scrolling the window.\n    */\n    window.addEventListener(\"scroll\", handleTransparentNavbar);\n\n    // Call the handleTransparentNavbar function to set the state with the initial value.\n    handleTransparentNavbar();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n  }, [dispatch, fixedNavbar]);\n\n  const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n  const handleConfiguratorOpen = () =>\n    setOpenConfigurator(dispatch, !openConfigurator);\n  const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n  const handleCloseMenu = () => setOpenMenu(false);\n\n  // Render the notifications menu\n  const renderMenu = () => (\n    <Menu\n      anchorEl={openMenu}\n      anchorReference={null}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      open={Boolean(openMenu)}\n      onClose={handleCloseMenu}\n      sx={{ mt: 2 }}\n    >\n      <NotificationItem icon={<Icon>email</Icon>} title=\"Check new messages\" />\n      <NotificationItem\n        icon={<Icon>podcasts</Icon>}\n        title=\"Manage Podcast sessions\"\n      />\n      <NotificationItem\n        icon={<Icon>shopping_cart</Icon>}\n        title=\"Payment successfully completed\"\n      />\n    </Menu>\n  );\n\n  // Styles for the navbar icons\n  const iconsStyle = ({\n    palette: { dark, white, text },\n    functions: { rgba },\n  }) => ({\n    color: () => {\n      let colorValue = light || darkMode ? white.main : dark.main;\n\n      if (transparentNavbar && !light) {\n        colorValue = darkMode ? rgba(text.main, 0.6) : text.main;\n      }\n\n      return colorValue;\n    },\n  });\n\n  return (\n    <AppBar\n      position={absolute ? \"absolute\" : navbarType}\n      color=\"inherit\"\n      sx={(theme) =>\n        navbar(theme, { transparentNavbar, absolute, light, darkMode })\n      }\n    >\n      <Toolbar sx={(theme) => navbarContainer(theme)}>\n        <img src={brandDark} width=\"100rem\" />\n\n        {isMini ? null : (\n          <MDBox sx={(theme) => navbarRow(theme, { isMini })}>\n            <MDBox pr={1}>\n              <MDInput label=\"Search here\" />\n            </MDBox>\n            <MDBox color={light ? \"white\" : \"inherit\"}>\n              <Link to=\"/authentication/sign-in/basic\">\n                <IconButton sx={navbarIconButton} size=\"small\" disableRipple>\n                  <Icon sx={iconsStyle}>account_circle</Icon>\n                </IconButton>\n              </Link>\n              <IconButton\n                size=\"small\"\n                disableRipple\n                color=\"inherit\"\n                sx={navbarMobileMenu}\n                onClick={handleMiniSidenav}\n              >\n                <Icon sx={iconsStyle} fontSize=\"medium\">\n                  {miniSidenav ? \"menu_open\" : \"menu\"}\n                </Icon>\n              </IconButton>\n              <IconButton\n                size=\"small\"\n                disableRipple\n                color=\"inherit\"\n                sx={navbarIconButton}\n                onClick={handleConfiguratorOpen}\n              >\n                <Icon sx={iconsStyle}>settings</Icon>\n              </IconButton>\n              <IconButton\n                size=\"small\"\n                disableRipple\n                color=\"inherit\"\n                sx={navbarIconButton}\n                aria-controls=\"notification-menu\"\n                aria-haspopup=\"true\"\n                variant=\"contained\"\n                onClick={handleOpenMenu}\n              >\n                <Icon sx={iconsStyle}>notifications</Icon>\n              </IconButton>\n              {renderMenu()}\n            </MDBox>\n          </MDBox>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\n// Setting default values for the props of DashboardNavbar\nDashboardNavbar.defaultProps = {\n  absolute: false,\n  light: false,\n  isMini: false,\n};\n\n// Typechecking props for the DashboardNavbar\nDashboardNavbar.propTypes = {\n  absolute: PropTypes.bool,\n  light: PropTypes.bool,\n  isMini: PropTypes.bool,\n};\n\nexport default DashboardNavbar;\n"]},"metadata":{},"sourceType":"module"}